name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        files: |
          safe-squash

    - name: Update Homebrew Formula
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      env:
        HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
      run: |
        set -e  # Exit on any error

        VERSION="${{ steps.version.outputs.VERSION }}"
        echo "::group::Preparing Homebrew formula for v${VERSION}"

        # Check if token is set
        if [ -z "$HOMEBREW_GITHUB_API_TOKEN" ]; then
          echo "::warning::HOMEBREW_TAP_TOKEN secret not set"
          echo "::warning::Skipping Homebrew update. Set the secret to enable auto-updates."
          echo "::warning::See: https://github.com/jadnohra/safe-squash/settings/secrets/actions"
          exit 0
        fi

        # Download the tarball for this release
        TARBALL_URL="https://github.com/jadnohra/safe-squash/archive/refs/tags/v${VERSION}.tar.gz"
        echo "Downloading tarball from: $TARBALL_URL"

        SHA256=$(curl -fsSL "$TARBALL_URL" | shasum -a 256 | cut -d' ' -f1)

        if [ -z "$SHA256" ]; then
          echo "::error::Failed to calculate SHA256"
          exit 1
        fi

        echo "SHA256: $SHA256"
        echo "::endgroup::"

        # Clone the homebrew tap
        echo "::group::Cloning homebrew-tap"
        git clone https://${HOMEBREW_GITHUB_API_TOKEN}@github.com/jadnohra/homebrew-tap.git tap
        cd tap
        echo "::endgroup::"

        # Create Formula directory if needed
        mkdir -p Formula

        # Update formula
        echo "::group::Generating formula"
        cat > Formula/safe-squash.rb <<'EOF'
        class SafeSquash < Formula
          desc "Simple, robust tool to squash all commits on your branch into one"
          homepage "https://github.com/jadnohra/safe-squash"
          url "TARBALL_URL_PLACEHOLDER"
          sha256 "SHA256_PLACEHOLDER"
          license "MIT"

          def install
            bin.install "safe-squash"
          end

          test do
            assert_match "safe-squash", shell_output("#{bin}/safe-squash --help")
          end
        end
        EOF

        # Replace placeholders
        sed -i "s|TARBALL_URL_PLACEHOLDER|${TARBALL_URL}|g" Formula/safe-squash.rb
        sed -i "s|SHA256_PLACEHOLDER|${SHA256}|g" Formula/safe-squash.rb

        echo "Generated formula:"
        cat Formula/safe-squash.rb
        echo "::endgroup::"

        # Validate Ruby syntax
        echo "::group::Validating formula syntax"
        if ! ruby -c Formula/safe-squash.rb; then
          echo "::error::Formula has Ruby syntax errors"
          exit 1
        fi
        echo "✓ Ruby syntax valid"
        echo "::endgroup::"

        # Commit and push
        echo "::group::Committing and pushing formula"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add Formula/safe-squash.rb

        if git diff --staged --quiet; then
          echo "::warning::No changes to commit (formula already up to date)"
        else
          git commit -m "Update safe-squash to ${VERSION}" \
                     -m "Auto-generated by GitHub Actions" \
                     -m "Release: https://github.com/jadnohra/safe-squash/releases/tag/v${VERSION}"

          if git push; then
            echo "✓ Formula updated successfully"
            echo "::notice::Homebrew formula updated to v${VERSION}"
          else
            echo "::error::Failed to push formula update"
            exit 1
          fi
        fi
        echo "::endgroup::"
